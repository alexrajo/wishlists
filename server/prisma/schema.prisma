generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthToken {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  value                 String   @db.VarChar(20)
  last_used             DateTime @db.Timestamp(6)
  users                 User    @relation(fields: [user_id], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  @@map("auth_tokens")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Friendship {
  user2Id               Int @map("user2_id")
  user1Id               Int @map("user1_id")
  confirmed             Boolean
  user1                 User   @relation("friendships_user1_idTousers", fields: [user1Id], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_user1") //initiating user
  user2                 User   @relation("friendships_user2_idTousers", fields: [user2Id], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_user2") //request-receiving user

  @@ignore
  @@map("friendships")
}

model User {
  userId                     Int           @id @default(autoincrement()) @map("user_id")
  username                   String        @db.VarChar(20) @unique
  password                   String        @db.Char(60)
  firstName                  String        @db.VarChar(25)    @map("first_name")
  lastName                   String        @db.VarChar(25)    @map("last_name")
  dateOfBirth                DateTime      @db.Date           @map("date_of_birth")
  email                      String?       @db.VarChar(254) @unique
  auth_tokens                AuthToken[]
  friendships_as_user1       Friendship[] @relation("friendships_user1_idTousers") @ignore
  friendships_as_user2       Friendship[] @relation("friendships_user2_idTousers") @ignore
  wishlists                  Wishlist[]

  @@map("users")
}

model Wishlist {
  wishlistId            BigInt  @id @default(autoincrement()) @map("wishlist_id")
  ownerId               Int @map("owner_id")
  title                 String  @db.VarChar(25)
  description           String? @db.VarChar(128)
  list                  Json
  users                 User   @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_owner")

  @@map("wishlists")
}
